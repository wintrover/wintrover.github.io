name: Deploy Jekyll site and Generate PDF

on:
  push:
    branches:
      - production
      - main
  workflow_dispatch:
    inputs:
      version:
        description: 'The version for the new release (e.g., v1.1.4)'
        required: true

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed for softprops/action-gh-release
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1' # Matched with generate-pdf.yml
          bundler-cache: false # Enabled for efficiency

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Install dependencies
        run: bundle install

      - name: Build with Jekyll
        run: bundle exec jekyll build --source . --destination _site --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production

      # --- PDF Generation Steps (Manual Trigger Only) ---
      - name: Setup Node.js for Playwright
        if: github.event_name == 'workflow_dispatch'
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Playwright recommends Node.js 18+

      - name: Install Playwright browsers
        if: github.event_name == 'workflow_dispatch'
        run: npx playwright install --with-deps

      - name: Install Node.js dependencies for PDF script
        if: github.event_name == 'workflow_dispatch'
        run: npm i playwright

      - name: Create PDF generation script
        if: github.event_name == 'workflow_dispatch'
        run: |
          cat <<'EOF' > generate-pdf.js
          const { chromium } = require('playwright');
          const http = require('http');
          const fs = require('fs');
          const path = require('path');

          const generatePdf = async (page, url, outputPath) => {
            console.log(`Generating PDF from ${url}...`);
            await page.goto(url, { waitUntil: 'networkidle' });
            console.log(`Page loaded successfully from ${url}.`);
            await page.waitForTimeout(5000); // Wait for any JS rendering
            await page.emulateMedia({ media: 'print' });
            console.log(`Emulating print media type for ${outputPath}.`);
            await page.pdf({
              path: outputPath,
              format: 'A4',
              printBackground: true,
              margin: { top: '1.5cm', right: '1.5cm', bottom: '1.5cm', left: '1.5cm' },
            });
            console.log(`Successfully generated ${outputPath}`);
          };

          (async () => {
            console.log('Starting local server for PDF generation...');
            const server = http.createServer((req, res) => {
              let reqPath = req.url === '/' ? '/index.html' : req.url;
              if (reqPath.endsWith('/')) {
                reqPath += 'index.html';
              }
              let filePath = path.join(__dirname, '_site', reqPath);
              let extname = path.extname(filePath);
              let contentType = 'text/html';
              switch (extname) {
                  case '.js': contentType = 'text/javascript'; break;
                  case '.css': contentType = 'text/css'; break;
                  case '.json': contentType = 'application/json'; break;
                  case '.png': contentType = 'image/png'; break;
                  case '.jpg': contentType = 'image/jpeg'; break;
                  case '.woff2': contentType = 'font/woff2'; break;
              }

              fs.readFile(filePath, (error, content) => {
                  if (error) {
                      if(error.code == 'ENOENT'){
                          res.writeHead(404, {'Content-Type': 'text/plain'});
                          res.end(`File not found: ${filePath}`);
                      } else {
                          console.error(`Error reading file ${filePath}:`, error);
                          res.writeHead(500, {'Content-Type': 'text/plain'});
                          res.end('Server error');
                      }
                  } else {
                      res.writeHead(200, { 'Content-Type': contentType });
                      res.end(content, 'utf-8');
                  }
              });
            }).listen(8080, () => console.log('Local server running on port 8080'));

            await new Promise(resolve => setTimeout(resolve, 2000));

            console.log('Starting PDF generation with Playwright...');
            const browser = await chromium.launch();
            const page = await browser.newPage();
            
            try {
              await generatePdf(page, 'http://localhost:8080/en/', 'resume_en.pdf');
              await generatePdf(page, 'http://localhost:8080/', 'resume_ko.pdf');
            } catch (err) {
              console.error('An error occurred during Playwright PDF generation:', err);
              process.exit(1);
            } finally {
              await browser.close();
              server.close();
              console.log('Playwright browser and local server closed.');
            }
          })();
          EOF

      - name: Run Playwright script to generate PDFs
        if: github.event_name == 'workflow_dispatch'
        run: node generate-pdf.js
      
      - name: Upload PDFs as artifact
        if: github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          name: resume-pdfs
          path: |
            resume_en.pdf
            resume_ko.pdf

      - name: Clean up old releases
        if: github.event_name == 'workflow_dispatch'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release list --limit 100 --json tagName --jq '.[].tagName' | while read tag; do
            echo "Deleting old release: $tag"
            gh release delete "$tag" --yes --cleanup-tag
          done

      - name: Create Latest Release
        if: github.event_name == 'workflow_dispatch'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ github.event.inputs.version }} \
            --latest \
            --title "Resume ${{ github.event.inputs.version }}" \
            --notes "Latest auto-generated resume PDF (English and Korean)." \
            resume_en.pdf \
            resume_ko.pdf

      # --- PDF Generation Steps End ---

      - name: Upload artifact for GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
