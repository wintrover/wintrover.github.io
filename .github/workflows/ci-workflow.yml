name: Deploy Jekyll site & Generate PDFs (parallel)

on:
  push:
    branches: [main]

jobs:
  # 1) Build the Jekyll site and upload artifact
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Ensure Linux platform in Gemfile.lock
        run: bundle lock --add-platform x86_64-linux

      - name: Install dependencies
        run: bundle install

      - name: Build with Jekyll
        run: bundle exec jekyll build --source . --destination _site --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production

      - name: Upload built site artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site

  # 2) Deploy to GitHub Pages (runs in parallel with PDF)
  deploy_pages:
    needs: build
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # 3) Generate PDFs with Playwright
  pdf:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download site artifact
        uses: actions/download-artifact@v4
        with:
          name: github-pages
          path: _site

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Install Playwright package
        run: npm i playwright

      - name: Checkout repository (for gh release)
        uses: actions/checkout@v4

      - name: Generate PDF files
        run: |
          node - <<'NODE'
          const { chromium } = require('playwright');
          const http = require('http');
          const fs = require('fs');
          const path = require('path');

          const generate = async (page, url, file) => {
            await page.goto(url, { waitUntil: 'networkidle' });
            await page.emulateMedia({ media: 'print' });
            await page.pdf({
              path: file,
              format: 'A4',
              printBackground: true,
              margin: { top: '1.5cm', right: '1.5cm', bottom: '1.5cm', left: '1.5cm' }
            });
          };

          (async () => {
            // simple static server
            const server = http.createServer((req, res) => {
              let p = req.url === '/' ? '/index.html' : req.url;
              if (p.endsWith('/')) p += 'index.html';
              const filePath = path.join(__dirname, '_site', p);
              fs.readFile(filePath, (err, content) => {
                if (err) { res.writeHead(404); res.end(); return; }
                res.writeHead(200);
                res.end(content);
              });
            }).listen(8080);

            const browser = await chromium.launch();
            const page = await browser.newPage();

            try {
              await generate(page, 'http://localhost:8080/en/', 'resume_en.pdf');
              await generate(page, 'http://localhost:8080/', 'resume_ko.pdf');
            } finally {
              await browser.close();
              server.close();
            }
          })();
          NODE

      - name: Release latest PDFs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REPO="$GITHUB_REPOSITORY"
          gh release delete latest --yes --cleanup-tag --repo "$REPO" || true
          gh release create latest --latest --title "Latest Resume" --notes "Auto-generated PDFs." --repo "$REPO" resume_en.pdf resume_ko.pdf
