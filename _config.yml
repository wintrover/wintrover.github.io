# Site
repository: wintrover/wintrover.github.io # 사용자님의 GitHub 저장소 경로
# favicon: images/favicon.ico # 필요시 파비콘 경로 지정

# Content configuration version
version: 2

# Personal info
name: Su Hyok Yun # 기존 title에서 가져옴
title: AI developer
email: wintrover@gmail.com
# email_title: Email
# phone: Your phone number (optional)
# phone_title: Phone
# website: https://wintrover.github.io # 기존 url에서 가져옴
# website_title: Web

# Dark Mode (true/false/never)
darkmode: never # 기본값 유지 또는 취향에 따라 변경

# Social links
# twitter_username:
github_username: wintrover # 사용자님의 GitHub ID
# stackoverflow_username:
# dribbble_username:
# facebook_username:
# flickr_username:
# instagram_username:
linkedin_username: https://www.linkedin.com/in/suhyok-yun-1934b713a/
# xing_username:
# pinterest_username:
# youtube_username:
# orcid_username:
# googlescholar_username:

# Additional icon links
# additional_links:
# - title: Link name
#   icon: Font Awesome brand icon name (eg. fab fa-twitter) (https://fontawesome.com/icons?d=gallery&s=brands&m=free)
#   url: Link url (eg. https://google.com)

# Google Analytics and Tag Manager
# gtm: "GTM-0000000"
# gtag: "UA-00000000-0"
# google_analytics: "UA-00000000-0"

# About Section
# about_title: About Me
about_profile_image: assets/images/profile.png # wintrover.github.io_new/assets/images/profile.png 를 사용한다고 가정, 필요시 경로 수정 또는 이미지 복사
about_content: | # Markdown 형식으로 자신을 소개해주세요.
  안녕하세요! Su Hyok Yun 입니다.
  이곳은 저의 개인 포트폴리오 웹사이트입니다.
  방문해주셔서 감사합니다.
  (wintrover.github.io_new/README.md 등의 내용을 참고하여 더 자세한 자기소개를 Markdown 형식으로 작성해주세요.)

content:
  - title: Projects
    layout: list
    content:
      - layout: top-middle # 레이아웃은 top, left, right, top-left, top-right, top-middle 중 선택
        title: Face Recognition Dating App (소담연)
        # link: /projects/sodamyeon # sodamyeon.md 파일이 있다면 해당 경로로
        additional_links:
          - title: GitHub Repository
            icon: fab fa-github
            url: https://github.com/Suyangdaekun/Sodamyeon.git
          - title: YouTube Demo
            icon: fab fa-youtube
            url: https://www.youtube.com/embed/OM7OZrjQ1wo
        quote: >
          A senior dating app that leverages face reading and astrology-based matching algorithms. (관상학과 천문학 기반 매칭 알고리즘을 활용한 노인 데이팅 앱)
        description: |
          **Dev Period:** 2 weeks
          **Skills:** Mediapipe, Flask, Socket, Firebase

          **Key Features & Challenges:**
          - Developed facial landmark recognition system, comparing Mediapipe, dlib, and FAN for accuracy.
          - Addressed CUDA memory issues and version conflicts using Docker and dynamic device detection.
          - Created a physiognomy analysis algorithm based on facial ratios and alignment preprocessing.
          - Solved multi-device compatibility issues with resolution normalization and server-side processing options.
          - Implemented robust real-time messaging with Socket.IO and Firebase.
          - Designed a senior-friendly UI/UX with larger touch targets and simplified navigation.
          - **Results:** Landmark detection accuracy improved to 94%, senior task completion to 92%, processing time reduced to 0.7s.

      - layout: top-middle
        title: Deep Fake Detect App
        # link: /projects/deepfake
        additional_links:
          - title: GitHub Repository
            icon: fab fa-github
            url: https://github.com/wintrover/DeepFakeDetectApp
          - title: YouTube Demo
            icon: fab fa-youtube
            url: https://www.youtube.com/embed/O3X-rWDxpi8
        quote: >
          A mobile application that uses deep learning models to detect deepfake images and videos. (딥러닝 모델을 사용하여 딥페이크 이미지와 비디오를 감지하는 모바일 애플리케이션)
        description: |
          **Dev Period:** 2 weeks
          **Skills:** ONNX, Kotlin, YOLO11, EfficientNet

          **Key Features & Challenges:**
          - Balanced model performance (EfficientNet-Lite0) and app size (16MB after quantization) for mobile deployment.
          - Resolved OOM errors by implementing bitmap recycling and ONNX tensor release.
          - Improved face detection accuracy from 30% miss rate to 94% using YOLO11n-Face and box expansion.
          - Enhanced UI responsiveness by migrating inference to coroutines and adding progress UI.
          - Fixed ONNX Runtime version mismatches by re-exporting models with specific opset versions.
          - **Results:** Model size 4.2MB, inference time 350ms, 91% accuracy on FaceForensics++. App crash rate reduced from 15% to 0.2%.

      - layout: top-middle
        title: CVFactory (자소서공장)
        # link: /projects/cvfactory
        additional_links:
          - title: GitHub Repository
            icon: fab fa-github
            url: https://github.com/wintrover/CVFactory
          - title: Live Demo
            icon: fas fa-external-link-alt
            url: https://cvfactory.dev
        quote: >
          An automated personal statement generation tool that creates professional documents from raw data. (원시 데이터에서 전문적인 자기소개서를 생성하는 자동화된 자소서 생성 도구)
        description: |
          **Dev Period:** In progress (진행 중)
          **Skills:** Python, Django, Groq API, Selenium

          **Key Features & Challenges:**
          - Automated job posting and company information crawlers using Selenium and BeautifulSoup.
          - Django backend with REST API for data management and user requests.
          - Integrated Groq API for generating personalized cover letters.
          - Addressed CSRF protection middleware issues in Django.
          - Enhanced security by managing environment variables and strengthening .gitignore.
          - Solved Groq API token limit overflows with a multi-stage API call approach.
          - Fixed frontend-backend CSRF token integration.
          - Resolved Groq API client initialization errors with patched methods and fallback HTTP client.
          - Deployed on Netlify for continuous integration and delivery.
          - **Future Improvements:** AI content suggestions, keyword optimization, job platform integration.

  - title: Experience # 경력 사항
    layout: list
    content:
      # 경력 사항이 있다면 아래 형식으로 추가해주세요.
      # - layout: right
      #   title: 회사명
      #   sub_title: 직책
      #   caption: 근무 기간 (예: 2020.03 - 현재)
      #   # link: 회사 웹사이트 링크 (선택 사항)
      #   # quote: >
      #   #   회사에 대한 간략한 소개 (선택 사항)
      #   description: |
      #     - 담당했던 주요 업무 및 프로젝트
      #     - 사용했던 기술 및 도구
      #     - 구체적인 성과 (수치화 가능하면 좋음)

  - title: Education # 학력 사항
    layout: list
    content:
      # 학력 사항을 아래 형식으로 추가해주세요.
      # - layout: top-right
      #   title: 학교명
      #   sub_title: 전공 및 학위 (예: 컴퓨터공학 학사)
      #   caption: 재학 기간 (예: 2015.03 - 2019.02)
      #   # quote: >
      #   #   학교 또는 학과에 대한 간략한 소개 (선택 사항)
      #   description: |
      #     - 주요 학습 내용 및 수강 과목
      #     - 관련 프로젝트 또는 논문
      #     - 학점 또는 성적 (선택 사항)

  - title: Skills # 보유 기술
    layout: text # 또는 list 형식으로도 가능
    content: | # Markdown으로 자유롭게 기술
      **Programming Languages:**
      - Python
      - Java
      - JavaScript

      **Frameworks & Libraries:**
      - Spring Boot
      - React
      - Node.js

      **Databases:**
      - MySQL
      - PostgreSQL

      **Tools:**
      - Git & GitHub
      - Docker
      - Jenkins

      **(기타 본인이 자신있는 기술들을 추가해주세요)**

# Footer
footer_show_references: true
# references_title: References on request

# Build settings
# theme: modern-resume-theme # 로컬에서 직접 테마를 수정/개발하는 경우가 아니면 주석 처리
remote_theme: sproogen/modern-resume-theme # GitHub 호스팅 시 권장되는 방식

sass:
  sass_dir: _sass
  style: compressed

plugins:
 - jekyll-feed # 기존 플러그인 유지
 - jekyll-seo-tag # 기존 플러그인 유지

exclude : [
  "Gemfile",
  "Gemfile.lock",
  "node_modules",
  "vendor/bundle/",
  "vendor/cache/",
  "vendor/gems/",
  "vendor/ruby/",
  "lib/",
  "scripts/",
  "docker-compose.yml",
  ]
